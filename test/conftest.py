# SPDX-FileCopyrightText: Contributors to technology-data <https://github.com/pypsa/technology-data>
#
# SPDX-License-Identifier: GPL-3.0-only

# coding: utf-8

import pathlib

import pandas as pd
import pytest
import yaml


@pytest.fixture(scope="session")
def config():
    path_config = pathlib.Path(pathlib.Path.cwd(), "config.yaml")
    with open(path_config) as file:
        config_dict = yaml.safe_load(file)
    return config_dict


@pytest.fixture(scope="function")
def cost_dataframe():
    return pd.DataFrame(
        {
            "technology": [
                "coal",
                "coal",
                "coal",
                "coal",
                "coal",
                "coal",
                "coal",
                "coal",
                "another_tech",
            ],
            "parameter": [
                "investment",
                "FOM",
                "VOM",
                "fuel",
                "investment",
                "discount rate",
                "co2 intensity",
                "lifetime",
                "investment",
            ],
            "value": [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0],
            "unit": [
                "unit",
                "unit",
                "unit",
                "unit",
                "unit",
                "unit",
                "unit",
                "unit",
                "unit",
            ],
            "source": [
                "source",
                "source",
                "source",
                "source",
                "source",
                "source",
                "source",
                "source",
                "source",
            ],
            "further description": ["a", "b", "c", "d", "e", "f", "g", "h", "i"],
            "currency_year": [2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020, 2020],
        },
        index=[0, 1, 2, 3, 4, 5, 6, 7, 8],
    )


@pytest.fixture(scope="function")
def atb_cost_dataframe():
    return pd.DataFrame(
        {
            "technology": ["coal", "coal", "coal", "coal", "coal", "coal"],
            "parameter": [
                "investment",
                "FOM",
                "VOM",
                "fuel",
                "investment",
                "discount rate",
            ],
            "value": [2.0, 2.0, 2.0, 2.0, 2.0, 2.0],
            "unit": [
                "unit_atb",
                "unit_atb",
                "unit_atb",
                "unit_atb",
                "unit_atb",
                "unit_atb",
            ],
            "source": [
                "source_atb",
                "source_atb",
                "source_atb",
                "source_atb",
                "source_atb",
                "source_atb",
            ],
            "further description": ["a", "b", "c", "d", "e", "f"],
            "currency_year": [2020, 2020, 2020, 2020, 2020, 2020],
            "financial_case": ["R&D", "R&D", "R&D", "R&D", "R&D", "R&D"],
            "scenario": [
                "Moderate",
                "Moderate",
                "Moderate",
                "Moderate",
                "Moderate",
                "Moderate",
            ],
        },
        index=[0, 1, 2, 3, 4, 5],
    )


@pytest.fixture(scope="function")
def mock_input_data():
    return pd.DataFrame(
        {
            "technology": [
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "random_tech",
                "central air-sourced heat pump",
                "central geothermal-sourced heat pump",
                "central gas boiler",
                "central resistive heater",
                "decentral air-sourced heat pump",
                "decentral gas boiler",
                "decentral ground-sourced heat pump",
                "fuel cell",
                "fuel cell",
                "fuel cell",
                "fuel cell",
            ],
            "unit": [
                "kW",
                "€",
                " per ",
                " / ",
                " /",
                "J/s",
                "$",
                "₤",
                "MEUR",
                "mio EUR",
                "mill. EUR",
                "1000EUR",
                "k EUR",
                "r/kW",
                "r/GWh",
                "r/GJ",
                " a year",
                "2015EUR",
                "2015-EUR",
                "2020-EUR",
                "EUR2015",
                "EUR-2015",
                "MWe",
                "EUR/MW of total input_e",
                "MWth",
                "MWheat",
                "MWhth",
                "MWhheat",
                "MWH Liquids",
                "MW Liquids",
                "MW Methanol",
                "MW/year FT Liquids/year",
                "MW/year Methanol",
                "MWh FT Liquids/year",
                "MWh methanol",
                "MW/year SNG",
                "MWh SNG",
                "MW SNG",
                "EUR/MWh of total input",
                "EUR/MWeh",
                "% -points of heat loss",
                "FT Liquids Output, MWh/MWh Total Input",
                "MW Ammonia output",
                "MW Ammonia",
                "MWh Ammonia",
                "EUR/MW/y",
                "EUR/MW",
                "EUR/MW/year",
                "EUR/MWh",
                "MW",
                "EUR/MW",
                "EUR/MW/year",
                "EUR/MWh",
                "MW",
                "EUR/MW",
                "EUR/MW/year",
                "EUR/MWh",
                "EUR/MW",
                "EUR/MW/year",
                "EUR/MWh",
                "MW",
            ],
            "value": [
                1000.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                0.000001,
                0.000001,
                0.000001,
                0.001,
                0.001,
                0.001,
                1000.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
            ],
        },
    ).set_index(["technology"])


@pytest.fixture(scope="function")
def mock_output_data():
    def mock_output(source):
        if source == "dea":
            return pd.DataFrame(
                {
                    "technology": [
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "central air-sourced heat pump",
                        "central geothermal-sourced heat pump",
                        "central gas boiler",
                        "central resistive heater",
                        "decentral air-sourced heat pump",
                        "decentral gas boiler",
                        "decentral ground-sourced heat pump",
                        "fuel cell",
                        "fuel cell",
                        "fuel cell",
                        "fuel cell",
                    ],
                    "unit": [
                        "MW",
                        "EUR",
                        "/",
                        "/",
                        "/",
                        "W",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "r/MW",
                        "r/MWh",
                        "r/MWh",
                        "/year",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "MW_e",
                        "EUR/MW_e",
                        "MW_th",
                        "MW_th",
                        "MWh_th",
                        "MWh_th",
                        "MWh_FT",
                        "MW_FT",
                        "MW_MeOH",
                        "MW_FT/year",
                        "MW_MeOH/year",
                        "MWh_FT",
                        "MWh_MeOH",
                        "MW_CH4/year",
                        "MWh_CH4",
                        "MW_CH4",
                        "EUR/MWh_e",
                        "EUR/MW_eh",
                        "MWh_th/MWh_el",
                        "MWh_FT/MWh_H2",
                        "MW_NH3",
                        "MW_NH3",
                        "MWh_NH3",
                        "EUR/MW/year",
                        "EUR/MW",
                        "EUR/MW/year",
                        "EUR/MWh",
                        "MW",
                        "EUR/MW_th",
                        "EUR/MW_th/year",
                        "EUR/MWh_th",
                        "MW_th",
                        "EUR/MW_th",
                        "EUR/MW_th/year",
                        "EUR/MWh_th",
                        "EUR/MW_e",
                        "EUR/MW_e/year",
                        "EUR/MWh_e",
                        "MW_e",
                    ],
                    "value": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.8917822267802202,
                        1.177107611177814,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        3.6,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                    ],
                },
            ).set_index(["technology"])
        else:
            return pd.DataFrame(
                {
                    "technology": [
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "random_tech",
                        "central air-sourced heat pump",
                        "central geothermal-sourced heat pump",
                        "central gas boiler",
                        "central resistive heater",
                        "decentral air-sourced heat pump",
                        "decentral gas boiler",
                        "decentral ground-sourced heat pump",
                        "fuel cell",
                        "fuel cell",
                        "fuel cell",
                        "fuel cell",
                    ],
                    "unit": [
                        "MW",
                        "EUR",
                        "/",
                        "/",
                        "/",
                        "W",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "r/MW",
                        "r/MWh",
                        "r/MWh",
                        "/year",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "EUR",
                        "MW_e",
                        "EUR/MW_e",
                        "MW_th",
                        "MW_th",
                        "MWh_th",
                        "MWh_th",
                        "MWh_FT",
                        "MW_FT",
                        "MW_MeOH",
                        "MW_FT/year",
                        "MW_MeOH/year",
                        "MWh_FT",
                        "MWh_MeOH",
                        "MW_CH4/year",
                        "MWh_CH4",
                        "MW_CH4",
                        "EUR/MWh_e",
                        "EUR/MW_eh",
                        "MWh_th/MWh_el",
                        "MWh_FT/MWh_H2",
                        "MW_NH3",
                        "MW_NH3",
                        "MWh_NH3",
                        "EUR/MW/year",
                        "EUR/MW",
                        "EUR/MW/year",
                        "EUR/MWh",
                        "MW",
                        "EUR/MW",
                        "EUR/MW/year",
                        "EUR/MWh",
                        "MW",
                        "EUR/MW",
                        "EUR/MW/year",
                        "EUR/MWh",
                        "EUR/MW",
                        "EUR/MW/year",
                        "EUR/MWh",
                        "MW",
                    ],
                    "value": [
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        0.8917822267802202,
                        1.177107611177814,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        3.6,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                        1.0,
                    ],
                },
            ).set_index(["technology"])

    return mock_output
